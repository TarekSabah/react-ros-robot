{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","scripts/config.js","components/Connection.jsx","components/Teleoperation.jsx","components/RobotState.jsx","components/Map.jsx","components/Home.jsx","components/About.jsx","components/Body.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","Container","Navbar","bg","variant","expand","collapseOnSelect","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","Footer","Config","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","RECONNECTION_TIMER","PUB_CMD_VEL_TOPIC","PUB_CMD_VEL_MESSAGE","SUB_CMD_POSE_TOPIC","SUB_CMD_POSE_MESSAGE","SUB_CMD_ODOM_TOPIC","SUB_CMD_ODOM_MESSAGE","Connection","state","connected","ros","init_connection","this","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","error","Alert","Teleoperation","handleMove","bind","handleStop","event","cmd_vel","Topic","name","messageType","twist","Message","linear","x","y","z","angular","publish","Row","Col","size","baseColor","stickColor","move","stop","RobotState","Orientation","Linear_velocity","Angular_velocity","getRobotState","subscribe","message","pose","position","toFixed","getOrientationFromQuaternion","orientation","ros_orientation_quaternion","q","Three","w","setFromQuaternion","Math","PI","Map","view_map","viewer","ROS2D","Viewer","divID","width","height","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","Home","About","Body","path","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.297abaeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Navbar, Nav, Container} from 'react-bootstrap';\n\n\n\nclass Header extends Component{\n\n    render(){\n        return(\n            <Container >\n                <Navbar bg=\"dark\" variant = \"dark\" expand=\"lg\" collapseOnSelect>\n                    <Navbar.Brand href=\"/\"> </Navbar.Brand>\n                    <Navbar.Brand href=\"/\"> Agricultare Robot</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"/\"> Home </Nav.Link>\n                        <Nav.Link href=\"/About\"> About </Nav.Link>\n                    </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </Container>\n      );\n       \n    }\n}\nexport default Header;      ","import React, { Component } from 'react'\nimport { Container } from 'react-bootstrap'\n\nclass Footer extends Component{\n\n    render(){\n        return(\n            <Container className=\"text-center\">\n                <p> Tarek &copy; 2021</p>\n            </Container>\n        );\n    }\n}\n\nexport default Footer;\n","const Config = {\n    ROSBRIDGE_SERVER_IP: \"192.168.1.10\",\n    ROSBRIDGE_SERVER_PORT: \"9090\",\n    RECONNECTION_TIMER: 3000,\n    PUB_CMD_VEL_TOPIC: \"/cmd_vel\",\n    PUB_CMD_VEL_MESSAGE:\"geometry_msgs/Twist\",\n    SUB_CMD_POSE_TOPIC:\"/amcl_pose\",\n    SUB_CMD_POSE_MESSAGE:\"geometry_msgs/PoseWithCovarianceStamped\",\n    SUB_CMD_ODOM_TOPIC:\"/odom\",\n    SUB_CMD_ODOM_MESSAGE:\"nav_msgs/Odometry\",\n};\n\nexport default Config;","import React, { Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\n\nclass Connection extends Component{\n    state  = {connected : false, ros: null }; //ros only handle the object for the connection, so we can use it inside the Connection.jsx\n\n    // We need to make constructor to be able to call this.state.ros method\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established!\");\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <Alert className='text-center mt-3' variant={this.state.connected? \"success\":\"danger\"}> \n                    {this.state.connected? \"Robot Connected\": \"Robot Disconnected\" }\n                </Alert>\n            </div>\n            //<h2>Connection</h2>\n         );\n    } \n}\n\nexport default Connection;","import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport Config from '../scripts/config';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\n\nclass Teleoperation extends Component{\n    state = {ros: null};\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in Teleoperation Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n\n    handleMove(event) {\n        console.log(\"Handle Move\");\n\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n    handleStop(event) {\n        console.log(\"Handle Stop\");\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n\n    render(){\n        return(\n        <div>\n            <Row>\n                <Col> \n                    <h2 className=\"mt-4\"></h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                <Joystick \n                    size={100} \n                    baseColor=\"#EEEEEE\" \n                    stickColor=\"#000000\" \n                    move={this.handleMove} \n                    stop={this.handleStop}>\n\n                </Joystick>\n                </Col>\n            </Row>\n\n\n        </div>\n        );\n    }\n}\nexport default Teleoperation; \n","import React, { Component } from 'react';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\nimport Config from '../scripts/config';\nimport * as Three from \"three\";\n\n\nclass RobotState extends Component{\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        Orientation:0,\n        Linear_velocity:0,\n        Angular_velocity:0,\n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n    componentDidMount(){\n        this.getRobotState();\n        // this.getOrientationFromQuaternion();\n    }\n\n    getRobotState() {\n        //Create Pose Subscriber\n        var pose_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.SUB_CMD_POSE_TOPIC,\n            messageType: Config.SUB_CMD_POSE_MESSAGE,\n        });\n        //Create a pose callback\n        pose_subscriber.subscribe((message) => {\n            this.setState({x: message.pose.pose.position.x.toFixed(2)});\n            this.setState({y: message.pose.pose.position.y.toFixed(2)});\n            this.setState({\n                Orientation: this.getOrientationFromQuaternion(\n                    message.pose.pose.orientation\n                    ).toFixed(2),\n                });\n        }); \n\n        //Create a subscriber for the velocities in the odom topic\n\n        var velocity_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.SUB_CMD_ODOM_TOPIC,\n            messageType: Config.SUB_CMD_ODOM_MESSAGE,\n        });\n        //Create a pose callback\n        velocity_subscriber.subscribe((message) => {\n            this.setState({Linear_velocity: message.twist.twist.linear.x.toFixed(2)});\n            this.setState({Angular_velocity: message.twist.twist.angular.z.toFixed(2)});\n        }); \n        \n    } \n\n    getOrientationFromQuaternion(ros_orientation_quaternion){\n        var q = new Three.Quaternion(\n            ros_orientation_quaternion.x,\n            ros_orientation_quaternion.y,\n            ros_orientation_quaternion.z,\n            ros_orientation_quaternion.w\n            ); \n\n        //Convert this quaternion into Roll, Pitch and Yaw\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        return RPY[\"_z\"] * (180 / Math.PI);\n    }\n\n    //Create a subscriber for the \n\n\n    render(){\n        return(\n            <div>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-5\">Position</h4>\n                    <p className=\"mt-0\">x: {this.state.x}</p>\n                    <p className=\"mt-0\">y: {this.state.y}</p>\n                    <p className=\"mt-0\">Orientation: {this.state.Orientation}</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-4\">Velocities</h4>\n                    <p className=\"mt-0\">Linear Velocity: {this.state.Linear_velocity}</p>\n                    <p className=\"mt-0\">Angular Velocity: {this.state.Angular_velocity}</p>\n\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\nexport default RobotState; ","import React, { Component } from 'react';\nimport Config from '../scripts/config';\n\n\nclass Map extends Component{\n    state = {\n        ros: null,\n    };\n\n    constructor(){\n        super();\n        this.view_map = this.view_map.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT );                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }    \n\n    componentDidMount(){\n        this.init_connection();\n        this.view_map();\n    }\n\n\n    view_map(){\n        var viewer = new window.ROS2D.Viewer({\n            divID: \"nav_div\",\n            width:640,\n            height:480\n        });\n\n        var navClient = new window.NAV2D.OccupancyGridClientNav({\n            ros: this.state.ros,\n            rootObject: viewer.scene,\n            viewer: viewer,\n            serverName: \"/move_base\",\n            withOrientation: true,\n        }); \n    }\n\n\n\n    render(){\n        return <div>\n            <div id = \"nav_div\">Viewer</div>\n        </div>;\n    }\n\n}\n\n\nexport default Map;","import React, { Component } from 'react';\nimport Connection from './Connection';\nimport Teleoperation from './Teleoperation';\nimport RobotState from './RobotState';\nimport Map from './Map';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\nclass Home extends Component{\n    state = {};\n    render(){\n        return(\n            <div>\n                <Container>\n                    <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n                    <Row>\n                        <Col> \n                            <Connection />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col> \n                            <h2>Teleoperation </h2>\n                        </Col>\n                        <Col> \n                            <h2>Map</h2>\n                            \n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col> \n                            <Teleoperation />\n                            <RobotState /> \n                        </Col>\n                        <Col> \n                            <Map></Map>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            \n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\nexport default Home;","import React, { Component } from 'react'\n\nclass About extends Component{\n\n    render(){\n        return(\n            <main>\n                <div>\n                    <h1 className=\"text-center mt-3\">\n                        About\n                    </h1>\n                    <p className=\"text-center mt-4\">\n                        This is an application for control Agri Robot \n                        through web Interface\n                    </p>\n                </div>  \n            </main>\n              \n        );\n    }\n}\nexport default About;","import React, {Component} from 'react'\nimport {Container} from 'react-bootstrap';\nimport { Route, BrowserRouter as Router ,Switch} from 'react-router-dom';\nimport Home from './Home';\nimport About from './About';\n\nclass Body extends Component{\n  \n    render(){\n\n        return(\n            <Container>\n                <Router>\n                    <Switch>\n                        <Route path = \"/\" exact component = {Home}></Route>\n                        <Route path = \"/About\" exact component = {About}></Route>\n                    </Switch>\n                </Router>\n            </Container> \n        );\n    }\n}\n\nexport default Body;\n","import Header from './components/Header'\nimport Footer from './components/Footer'\nimport Body from './components/Body';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Body> </Body >\n        <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap/lux-bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}