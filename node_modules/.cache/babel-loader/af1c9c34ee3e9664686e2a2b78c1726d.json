{"ast":null,"code":"var _jsxFileName = \"/home/tarek/react-ros-robot/src/components/Map.jsx\";\nimport React, { Component } from 'react';\nimport Config from '../scripts/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Map extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ros: null\n    };\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      //Triger when there is an event and event here will be connected\n      console.log(\"connection established in RobotState Component!\");\n      console.log(this.state.ros);\n      this.setState({\n        connected: true\n      }); //Update the state if connected\n    });\n    this.state.ros.on(\"close\", () => {\n      //Create another event when the connection is closed\n      console.log(\"connection is closed\");\n      this.setState({\n        connected: false\n      });\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT); //This event will take a string that represent the connections, setting the IP address and the PORT number \n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    }); //To take the connection parameters\n    //We need to get them from the machine where the ROSbridge is running\n    //To get the IP write command ifconfig\n    //And the PORT Number by default is 9090\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT); //This event will take a string that represent the connections, setting the IP address and the PORT number \n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div\",\n        children: \"Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/Map.jsx"],"names":["React","Component","Config","Map","state","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","componentDidMount","view_map","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;;AAGA,MAAMC,GAAN,SAAkBF,SAAlB,CAA2B;AAAA;AAAA;AAAA,SACvBG,KADuB,GACf;AACJC,MAAAA,GAAG,EAAE;AADD,KADe;AAAA;;AAOvBC,EAAAA,eAAe,GAAE;AACb,SAAKF,KAAL,CAAWC,GAAX,GAAiB,IAAIE,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWC,GAAvB;AAEA,SAAKD,KAAL,CAAWC,GAAX,CAAeO,EAAf,CAAkB,YAAlB,EAA+B,MAAM;AAAW;AAC5CF,MAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAL,CAAWC,GAAvB;AACA,WAAKQ,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAG;AAAb,OAAd,EAHiC,CAGY;AAChD,KAJD;AAMA,SAAKV,KAAL,CAAWC,GAAX,CAAeO,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAAW;AACxCF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAKE,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAG;AAAb,OAAd;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,YAAI;AACA,eAAKX,KAAL,CAAWC,GAAX,CAAeW,OAAf,CAAwB,UAAUd,MAAM,CAACe,mBAAjB,GAAuC,GAAvC,GAA6Cf,MAAM,CAACgB,qBAA5E,EADA,CACwH;AAC3H,SAFD,CAEC,OAAMC,KAAN,EAAY;AACTT,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ,OANS,EAMRT,MAAM,CAACkB,kBANC,CAAV;AAOH,KAVD,EAVa,CAqBb;AACA;AACA;AACA;;AACA,QAAI;AACA,WAAKhB,KAAL,CAAWC,GAAX,CAAeW,OAAf,CAAwB,UAAUd,MAAM,CAACe,mBAAjB,GAAuC,GAAvC,GAA6Cf,MAAM,CAACgB,qBAA5E,EADA,CACyH;AAC5H,KAFD,CAEC,OAAMC,KAAN,EAAY;AACTT,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ;;AAEDU,EAAAA,iBAAiB,GAAE;AACf,SAAKf,eAAL;AACH;;AAGDgB,EAAAA,QAAQ,GAAE;AACN,QAAIC,MAAM,GAAG,IAAIhB,MAAM,CAACiB,KAAP,CAAaC,MAAjB,CAAwB;AACjCC,MAAAA,KAAK,EAAE,SAD0B;AAEjCC,MAAAA,KAAK,EAAC,GAF2B;AAGjCC,MAAAA,MAAM,EAAC;AAH0B,KAAxB,CAAb;AAMA,QAAIC,SAAS,GAAG,IAAItB,MAAM,CAACuB,KAAX,EAAhB;AACH;;AAIDC,EAAAA,MAAM,GAAE;AACJ,wBAAO;AAAA,6BACH;AAAK,QAAA,EAAE,EAAG,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADG;AAAA;AAAA;AAAA;AAAA,YAAP;AAGH;;AA5DsB;;AAiE3B,eAAe5B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Config from '../scripts/config';\n\n\nclass Map extends Component{\n    state = {\n        ros: null,\n    };\n\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT );                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }    \n\n    componentDidMount(){\n        this.init_connection();\n    }\n\n\n    view_map(){\n        var viewer = new window.ROS2D.Viewer({\n            divID: \"nav_div\",\n            width:640,\n            height:480\n        });\n\n        var navClient = new window.NAV2D(); \n    }\n\n\n\n    render(){\n        return <div>\n            <div id = \"nav_div\">Viewer</div>\n        </div>;\n    }\n\n}\n\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}