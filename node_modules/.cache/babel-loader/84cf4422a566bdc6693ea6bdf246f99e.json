{"ast":null,"code":"var _jsxFileName = \"/home/tarek/react-ros-robot/src/components/Teleoperation.jsx\";\nimport React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport Config from '../scripts/config';\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Teleoperation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection();\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      //Triger when there is an event and event here will be connected\n      console.log(\"connection established in Teleoperation Component!\");\n      console.log(this.state.ros);\n      this.setState({\n        connected: true\n      }); //Update the state if connected\n    });\n    this.state.ros.on(\"close\", () => {\n      //Create another event when the connection is closed\n      console.log(\"connection is closed\");\n      this.setState({\n        connected: false\n      });\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT); //This event will take a string that represent the connections, setting the IP\n          // address and the PORT number \n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    }); //To take the connection parameters\n    //We need to get them from the machine where the ROSbridge is running\n    //To get the IP write command ifconfig\n    //And the PORT Number by default is 9090\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT); //This event will take a string that represent the connections, setting the IP\n      // address and the PORT number \n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  handleMove(event) {\n    console.log(\"Handle Move\"); //We need to create ROS Publisher on the Topic cmd_vel\n\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.CMD_VEL_TOPIC,\n      //Name of the Topic\n      messageType: \"geometry_msgs/Twist\" //Message Type\n\n    }); //We need to create Twist message to be sent to ROSBridge\n\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: event.y / 50,\n        y: 0,\n        z: 0\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: -event.x / 50\n      }\n    }); //We need to Publish the message on the cmd_vel Topic\n\n    cmd_vel.publish(twist);\n  }\n\n  handleStop(event) {\n    console.log(\"Handle Stop\"); //We need to create ROS Publisher on the Topic cmd_vel\n\n    var cmd_vel = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: Config.PUB_CMD_VEL_TOPIC,\n      //Name of the Topic\n      messageType: Config.PUB_CMD_VEL_MESSAGE //Message Type\n\n    }); //We need to create Twist message to be sent to ROSBridge\n\n    var twist = new window.ROSLIB.Message({\n      linear: {\n        x: 0,\n        y: 0,\n        z: 0\n      },\n      angular: {\n        x: 0,\n        y: 0,\n        z: 0\n      }\n    }); //We need to Publish the message on the cmd_vel Topic\n\n    cmd_vel.publish(twist);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"mt-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Joystick, {\n            size: 100,\n            baseColor: \"#EEEEEE\",\n            stickColor: \"#000000\",\n            move: this.handleMove,\n            stop: this.handleStop\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Teleoperation;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/Teleoperation.jsx"],"names":["React","Component","Joystick","Config","Row","Col","Container","Button","Teleoperation","constructor","state","ros","init_connection","handleMove","bind","handleStop","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","event","cmd_vel","Topic","name","CMD_VEL_TOPIC","messageType","twist","Message","linear","x","y","z","angular","publish","PUB_CMD_VEL_TOPIC","PUB_CMD_VEL_MESSAGE","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,SAAlB,EAA6BC,MAA7B,QAA0C,iBAA1C;;;AAGA,MAAMC,aAAN,SAA4BP,SAA5B,CAAqC;AAGjCQ,EAAAA,WAAW,GAAE;AACT;AADS,SAFbC,KAEa,GAFL;AAACC,MAAAA,GAAG,EAAE;AAAN,KAEK;AAET,SAAKC,eAAL;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAGDF,EAAAA,eAAe,GAAE;AACb,SAAKF,KAAL,CAAWC,GAAX,GAAiB,IAAIK,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,GAAvB;AAEA,SAAKD,KAAL,CAAWC,GAAX,CAAeU,EAAf,CAAkB,YAAlB,EAA+B,MAAM;AAAW;AAC5CF,MAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,GAAvB;AACA,WAAKW,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAG;AAAb,OAAd,EAHiC,CAGY;AAChD,KAJD;AAMA,SAAKb,KAAL,CAAWC,GAAX,CAAeU,EAAf,CAAkB,OAAlB,EAA2B,MAAM;AAAW;AACxCF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAKE,QAAL,CAAc;AAACC,QAAAA,SAAS,EAAG;AAAb,OAAd;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,YAAI;AACA,eAAKd,KAAL,CAAWC,GAAX,CAAec,OAAf,CACI,UACAtB,MAAM,CAACuB,mBADP,GAEA,GAFA,GAGAvB,MAAM,CAACwB,qBAJX,EADA,CAKuD;AACX;AAC/C,SAPD,CAOC,OAAMC,KAAN,EAAY;AACTT,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ,OAXS,EAWRjB,MAAM,CAAC0B,kBAXC,CAAV;AAYH,KAfD,EAVa,CA0Bb;AACA;AACA;AACA;;AACA,QAAI;AACA,WAAKnB,KAAL,CAAWC,GAAX,CAAec,OAAf,CACI,UACAtB,MAAM,CAACuB,mBADP,GAEA,GAFA,GAGAvB,MAAM,CAACwB,qBAJX,EADA,CAMuB;AACqB;AAC/C,KARD,CAQC,OAAMC,KAAN,EAAY;AACTT,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ;;AAGDP,EAAAA,UAAU,CAACiB,KAAD,EAAQ;AACdX,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADc,CAGd;;AACA,QAAIW,OAAO,GAAG,IAAIf,MAAM,CAACC,MAAP,CAAce,KAAlB,CAAwB;AAClCrB,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADkB;AAElCsB,MAAAA,IAAI,EAAE9B,MAAM,CAAC+B,aAFqB;AAEN;AAC5BC,MAAAA,WAAW,EAAE,qBAHqB,CAGE;;AAHF,KAAxB,CAAd,CAJc,CAUd;;AACA,QAAIC,KAAK,GAAG,IAAIpB,MAAM,CAACC,MAAP,CAAcoB,OAAlB,CAA0B;AAClCC,MAAAA,MAAM,EAAC;AACHC,QAAAA,CAAC,EAAET,KAAK,CAACU,CAAN,GAAU,EADV;AAEHA,QAAAA,CAAC,EAAE,CAFA;AAGHC,QAAAA,CAAC,EAAE;AAHA,OAD2B;AAMlCC,MAAAA,OAAO,EAAC;AACJH,QAAAA,CAAC,EAAE,CADC;AAEJC,QAAAA,CAAC,EAAE,CAFC;AAGJC,QAAAA,CAAC,EAAE,CAACX,KAAK,CAACS,CAAP,GAAW;AAHV;AAN0B,KAA1B,CAAZ,CAXc,CAuBd;;AACAR,IAAAA,OAAO,CAACY,OAAR,CAAgBP,KAAhB;AACH;;AACDrB,EAAAA,UAAU,CAACe,KAAD,EAAQ;AACdX,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADc,CAEd;;AACA,QAAIW,OAAO,GAAG,IAAIf,MAAM,CAACC,MAAP,CAAce,KAAlB,CAAwB;AAClCrB,MAAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADkB;AAElCsB,MAAAA,IAAI,EAAE9B,MAAM,CAACyC,iBAFqB;AAEF;AAChCT,MAAAA,WAAW,EAAEhC,MAAM,CAAC0C,mBAHc,CAGO;;AAHP,KAAxB,CAAd,CAHc,CASd;;AACA,QAAIT,KAAK,GAAG,IAAIpB,MAAM,CAACC,MAAP,CAAcoB,OAAlB,CAA0B;AAClCC,MAAAA,MAAM,EAAC;AACHC,QAAAA,CAAC,EAAE,CADA;AAEHC,QAAAA,CAAC,EAAE,CAFA;AAGHC,QAAAA,CAAC,EAAE;AAHA,OAD2B;AAMlCC,MAAAA,OAAO,EAAC;AACJH,QAAAA,CAAC,EAAE,CADC;AAEJC,QAAAA,CAAC,EAAE,CAFC;AAGJC,QAAAA,CAAC,EAAE;AAHC;AAN0B,KAA1B,CAAZ,CAVc,CAsBd;;AACAV,IAAAA,OAAO,CAACY,OAAR,CAAgBP,KAAhB;AACH;;AAEDU,EAAAA,MAAM,GAAE;AACJ,wBACA;AAAA,8BACI,QAAC,GAAD;AAAA,+BACI,QAAC,GAAD;AAAA,iCACI;AAAI,YAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAMI,QAAC,GAAD;AAAA,+BACI,QAAC,GAAD;AAAA,iCACA,QAAC,QAAD;AACI,YAAA,IAAI,EAAE,GADV;AAEI,YAAA,SAAS,EAAC,SAFd;AAGI,YAAA,UAAU,EAAC,SAHf;AAII,YAAA,IAAI,EAAE,KAAKjC,UAJf;AAKI,YAAA,IAAI,EAAE,KAAKE;AALf;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAuBH;;AAnIgC;;AAqIrC,eAAeP,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport Config from '../scripts/config';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\n\nclass Teleoperation extends Component{\n    state = {ros: null};\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in Teleoperation Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n\n    handleMove(event) {\n        console.log(\"Handle Move\");\n\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.CMD_VEL_TOPIC, //Name of the Topic\n            messageType: \"geometry_msgs/Twist\", //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n    handleStop(event) {\n        console.log(\"Handle Stop\");\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n\n    render(){\n        return(\n        <div>\n            <Row>\n                <Col> \n                    <h2 className=\"mt-4\"></h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                <Joystick \n                    size={100} \n                    baseColor=\"#EEEEEE\" \n                    stickColor=\"#000000\" \n                    move={this.handleMove} \n                    stop={this.handleStop}>\n\n                </Joystick>\n                </Col>\n            </Row>\n\n\n        </div>\n        );\n    }\n}\nexport default Teleoperation; \n"]},"metadata":{},"sourceType":"module"}