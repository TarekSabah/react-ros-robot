{"ast":null,"code":"import _classCallCheck from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Joystick}from'react-joystick-component';import Config from'../scripts/config';import{Row,Col,Container,Button}from\"react-bootstrap\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Teleoperation=/*#__PURE__*/function(_Component){_inherits(Teleoperation,_Component);var _super=_createSuper(Teleoperation);function Teleoperation(){var _this;_classCallCheck(this,Teleoperation);_this=_super.call(this);_this.state={ros:null};_this.init_connection();_this.handleMove=_this.handleMove.bind(_assertThisInitialized(_this));_this.handleStop=_this.handleStop.bind(_assertThisInitialized(_this));return _this;}_createClass(Teleoperation,[{key:\"init_connection\",value:function init_connection(){var _this2=this;this.state.ros=new window.ROSLIB.Ros();console.log(this.state.ros);this.state.ros.on(\"connection\",function(){//Triger when there is an event and event here will be connected\nconsole.log(\"connection established in Teleoperation Component!\");console.log(_this2.state.ros);_this2.setState({connected:true});//Update the state if connected\n});this.state.ros.on(\"close\",function(){//Create another event when the connection is closed\nconsole.log(\"connection is closed\");_this2.setState({connected:false});setTimeout(function(){try{_this2.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP\n// address and the PORT number \n}catch(error){console.log(\"connection problem\");}},Config.RECONNECTION_TIMER);});//To take the connection parameters\n//We need to get them from the machine where the ROSbridge is running\n//To get the IP write command ifconfig\n//And the PORT Number by default is 9090\ntry{this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP\n// address and the PORT number \n}catch(error){console.log(\"connection problem\");}}},{key:\"handleMove\",value:function handleMove(event){console.log(\"Handle Move\");//We need to create ROS Publisher on the Topic cmd_vel\nvar cmd_vel=new window.ROSLIB.Topic({ros:this.state.ros,name:Config.PUB_CMD_VEL_TOPIC,//Name of the Topic\nmessageType:Config.PUB_CMD_VEL_MESSAGE//Message Type\n});//We need to create Twist message to be sent to ROSBridge\nvar twist=new window.ROSLIB.Message({linear:{x:event.y/50,y:0,z:0},angular:{x:0,y:0,z:-event.x/50}});//We need to Publish the message on the cmd_vel Topic\ncmd_vel.publish(twist);}},{key:\"handleStop\",value:function handleStop(event){console.log(\"Handle Stop\");//We need to create ROS Publisher on the Topic cmd_vel\nvar cmd_vel=new window.ROSLIB.Topic({ros:this.state.ros,name:Config.PUB_CMD_VEL_TOPIC,//Name of the Topic\nmessageType:Config.PUB_CMD_VEL_MESSAGE//Message Type\n});//We need to create Twist message to be sent to ROSBridge\nvar twist=new window.ROSLIB.Message({linear:{x:0,y:0,z:0},angular:{x:0,y:0,z:0}});//We need to Publish the message on the cmd_vel Topic\ncmd_vel.publish(twist);}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(\"h2\",{className:\"mt-4\"})})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Joystick,{size:100,baseColor:\"#EEEEEE\",stickColor:\"#000000\",move:this.handleMove,stop:this.handleStop})})})]});}}]);return Teleoperation;}(Component);export default Teleoperation;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/Teleoperation.jsx"],"names":["React","Component","Joystick","Config","Row","Col","Container","Button","Teleoperation","state","ros","init_connection","handleMove","bind","handleStop","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","event","cmd_vel","Topic","name","PUB_CMD_VEL_TOPIC","messageType","PUB_CMD_VEL_MESSAGE","twist","Message","linear","x","y","z","angular","publish"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport Config from '../scripts/config';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\n\nclass Teleoperation extends Component{\n    state = {ros: null};\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in Teleoperation Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n\n    handleMove(event) {\n        console.log(\"Handle Move\");\n\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n    handleStop(event) {\n        console.log(\"Handle Stop\");\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n\n    render(){\n        return(\n        <div>\n            <Row>\n                <Col> \n                    <h2 className=\"mt-4\"></h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                <Joystick \n                    size={100} \n                    baseColor=\"#EEEEEE\" \n                    stickColor=\"#000000\" \n                    move={this.handleMove} \n                    stop={this.handleStop}>\n\n                </Joystick>\n                </Col>\n            </Row>\n\n\n        </div>\n        );\n    }\n}\nexport default Teleoperation; \n"]},"metadata":{},"sourceType":"module"}