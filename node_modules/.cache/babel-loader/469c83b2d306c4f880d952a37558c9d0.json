{"ast":null,"code":"var _jsxFileName = \"/home/tarek/react-ros-robot/src/components/RobotState.jsx\";\nimport React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport { Row, Col, Container, Button } from \"react-bootstrap\";\nimport Config from '../scripts/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null,\n      x: 0,\n      y: 0,\n      Orientation: 0\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      //Triger when there is an event and event here will be connected\n      console.log(\"connection established in RobotState Component!\");\n      console.log(this.state.ros);\n      this.setState({\n        connected: true\n      }); //Update the state if connected\n    });\n    this.state.ros.on(\"close\", () => {\n      //Create another event when the connection is closed\n      console.log(\"connection is closed\");\n      this.setState({\n        connected: false\n      });\n      setTimeout(() => {\n        try {\n          this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT); //This event will take a string that represent the connections, setting the IP\n          // address and the PORT number \n        } catch (error) {\n          console.log(\"connection problem\");\n        }\n      }, Config.RECONNECTION_TIMER);\n    }); //To take the connection parameters\n    //We need to get them from the machine where the ROSbridge is running\n    //To get the IP write command ifconfig\n    //And the PORT Number by default is 9090\n\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT); //This event will take a string that represent the connections, setting the IP\n      // address and the PORT number \n    } catch (error) {\n      console.log(\"connection problem\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"x: \", this.state.x]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"y: \", this.state.y]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mt-0\",\n            children: [\"Orientation: \", this.state.Orientation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RobotState;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/RobotState.jsx"],"names":["React","Component","Joystick","Row","Col","Container","Button","Config","RobotState","constructor","state","ros","x","y","Orientation","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\nimport Config from '../scripts/config';\n\n\nclass RobotState extends Component{\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        Orientation:0,\n\n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n\n\n\n    render(){\n        return(\n            <div>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-4\">Position</h4>\n                    <p className=\"mt-0\">x: {this.state.x}</p>\n                    <p className=\"mt-0\">y: {this.state.y}</p>\n                    <p className=\"mt-0\">Orientation: {this.state.Orientation}</p>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\nexport default RobotState; "]},"metadata":{},"sourceType":"module"}