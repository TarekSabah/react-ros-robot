{"ast":null,"code":"import _classCallCheck from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Row,Col,Container,Button}from\"react-bootstrap\";import Config from'../scripts/config';import*as Three from\"three\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var RobotState=/*#__PURE__*/function(_Component){_inherits(RobotState,_Component);var _super=_createSuper(RobotState);function RobotState(){var _this;_classCallCheck(this,RobotState);_this=_super.call(this);_this.state={ros:null,x:0,y:0,Orientation:0,Linear_velocity:0,Angular_velocity:0};_this.init_connection();return _this;}_createClass(RobotState,[{key:\"init_connection\",value:function init_connection(){var _this2=this;this.state.ros=new window.ROSLIB.Ros();console.log(this.state.ros);this.state.ros.on(\"connection\",function(){//Triger when there is an event and event here will be connected\nconsole.log(\"connection established in RobotState Component!\");console.log(_this2.state.ros);_this2.setState({connected:true});//Update the state if connected\n});this.state.ros.on(\"close\",function(){//Create another event when the connection is closed\nconsole.log(\"connection is closed\");_this2.setState({connected:false});setTimeout(function(){try{_this2.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP\n// address and the PORT number \n}catch(error){console.log(\"connection problem\");}},Config.RECONNECTION_TIMER);});//To take the connection parameters\n//We need to get them from the machine where the ROSbridge is running\n//To get the IP write command ifconfig\n//And the PORT Number by default is 9090\ntry{this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP\n// address and the PORT number \n}catch(error){console.log(\"connection problem\");}}},{key:\"componentDidMount\",value:function componentDidMount(){this.getRobotState();// this.getOrientationFromQuaternion();\n}},{key:\"getRobotState\",value:function getRobotState(){var _this3=this;//Create Pose Subscriber\nvar pose_subscriber=new window.ROSLIB.Topic({ros:this.state.ros,name:Config.SUB_CMD_POSE_TOPIC,messageType:Config.SUB_CMD_POSE_MESSAGE});//Create a pose callback\npose_subscriber.subscribe(function(message){_this3.setState({x:message.pose.pose.position.x.toFixed(2)});_this3.setState({y:message.pose.pose.position.y.toFixed(2)});_this3.setState({Orientation:_this3.getOrientationFromQuaternion(message.pose.pose.orientation).toFixed(2)});});//Create a subscriber for the velocities in the odom topic\nvar velocity_subscriber=new window.ROSLIB.Topic({ros:this.state.ros,name:Config.SUB_CMD_ODOM_TOPIC,messageType:Config.SUB_CMD_ODOM_MESSAGE});//Create a pose callback\nvelocity_subscriber.subscribe(function(message){_this3.setState({Linear_velocity:message.twist.twist.linear.x.toFixed(2)});_this3.setState({Angular_velocity:message.twist.twist.angular.z.toFixed(2)});});}},{key:\"getOrientationFromQuaternion\",value:function getOrientationFromQuaternion(ros_orientation_quaternion){var q=new Three.Quaternion(ros_orientation_quaternion.x,ros_orientation_quaternion.y,ros_orientation_quaternion.z,ros_orientation_quaternion.w);//Convert this quaternion into Roll, Pitch and Yaw\nvar RPY=new Three.Euler().setFromQuaternion(q);return RPY[\"_z\"]*(180/Math.PI);}//Create a subscriber for the \n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"mt-5\",children:\"Position\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-0\",children:[\"x: \",this.state.x]}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-0\",children:[\"y: \",this.state.y]}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-0\",children:[\"Orientation: \",this.state.Orientation]})]})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsx(\"h4\",{className:\"mt-4\",children:\"Velocities\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-0\",children:[\"Linear Velocity: \",this.state.Linear_velocity]}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-0\",children:[\"Angular Velocity: \",this.state.Angular_velocity]})]})})]});}}]);return RobotState;}(Component);export default RobotState;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/RobotState.jsx"],"names":["React","Component","Row","Col","Container","Button","Config","Three","RobotState","state","ros","x","y","Orientation","Linear_velocity","Angular_velocity","init_connection","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","getRobotState","pose_subscriber","Topic","name","SUB_CMD_POSE_TOPIC","messageType","SUB_CMD_POSE_MESSAGE","subscribe","message","pose","position","toFixed","getOrientationFromQuaternion","orientation","velocity_subscriber","SUB_CMD_ODOM_TOPIC","SUB_CMD_ODOM_MESSAGE","twist","linear","angular","z","ros_orientation_quaternion","q","Quaternion","w","RPY","Euler","setFromQuaternion","Math","PI"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\nimport Config from '../scripts/config';\nimport * as Three from \"three\";\n\n\nclass RobotState extends Component{\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        Orientation:0,\n        Linear_velocity:0,\n        Angular_velocity:0,\n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n    componentDidMount(){\n        this.getRobotState();\n        // this.getOrientationFromQuaternion();\n    }\n\n    getRobotState() {\n        //Create Pose Subscriber\n        var pose_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.SUB_CMD_POSE_TOPIC,\n            messageType: Config.SUB_CMD_POSE_MESSAGE,\n        });\n        //Create a pose callback\n        pose_subscriber.subscribe((message) => {\n            this.setState({x: message.pose.pose.position.x.toFixed(2)});\n            this.setState({y: message.pose.pose.position.y.toFixed(2)});\n            this.setState({\n                Orientation: this.getOrientationFromQuaternion(\n                    message.pose.pose.orientation\n                    ).toFixed(2),\n                });\n        }); \n\n        //Create a subscriber for the velocities in the odom topic\n\n        var velocity_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.SUB_CMD_ODOM_TOPIC,\n            messageType: Config.SUB_CMD_ODOM_MESSAGE,\n        });\n        //Create a pose callback\n        velocity_subscriber.subscribe((message) => {\n            this.setState({Linear_velocity: message.twist.twist.linear.x.toFixed(2)});\n            this.setState({Angular_velocity: message.twist.twist.angular.z.toFixed(2)});\n        }); \n        \n    } \n\n    getOrientationFromQuaternion(ros_orientation_quaternion){\n        var q = new Three.Quaternion(\n            ros_orientation_quaternion.x,\n            ros_orientation_quaternion.y,\n            ros_orientation_quaternion.z,\n            ros_orientation_quaternion.w\n            ); \n\n        //Convert this quaternion into Roll, Pitch and Yaw\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        return RPY[\"_z\"] * (180 / Math.PI);\n    }\n\n    //Create a subscriber for the \n\n\n    render(){\n        return(\n            <div>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-5\">Position</h4>\n                    <p className=\"mt-0\">x: {this.state.x}</p>\n                    <p className=\"mt-0\">y: {this.state.y}</p>\n                    <p className=\"mt-0\">Orientation: {this.state.Orientation}</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-4\">Velocities</h4>\n                    <p className=\"mt-0\">Linear Velocity: {this.state.Linear_velocity}</p>\n                    <p className=\"mt-0\">Angular Velocity: {this.state.Angular_velocity}</p>\n\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\nexport default RobotState; "]},"metadata":{},"sourceType":"module"}