{"ast":null,"code":"import _classCallCheck from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Alert from'react-bootstrap/Alert';import Config from'../scripts/config';import{jsx as _jsx}from\"react/jsx-runtime\";var Connection=/*#__PURE__*/function(_Component){_inherits(Connection,_Component);var _super=_createSuper(Connection);//ros only handle the object for the connection, so we can use it inside the Connection.jsx\n// We need to make constructor to be able to call this.state.ros method\nfunction Connection(){var _this;_classCallCheck(this,Connection);_this=_super.call(this);_this.state={connected:false,ros:null};_this.init_connection();return _this;}_createClass(Connection,[{key:\"init_connection\",value:function init_connection(){var _this2=this;this.state.ros=new window.ROSLIB.Ros();console.log(this.state.ros);this.state.ros.on(\"connection\",function(){//Triger when there is an event and event here will be connected\nconsole.log(\"connection established!\");_this2.setState({connected:true});//Update the state if connected\n});this.state.ros.on(\"close\",function(){//Create another event when the connection is closed\nconsole.log(\"connection is closed\");_this2.setState({connected:false});setTimeout(function(){try{_this2.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP\n// address and the PORT number \n}catch(error){console.log(\"connection problem\");}},Config.RECONNECTION_TIMER);});//To take the connection parameters\n//We need to get them from the machine where the ROSbridge is running\n//To get the IP write command ifconfig\n//And the PORT Number by default is 9090\ntry{this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP\n// address and the PORT number \n}catch(error){console.log(\"connection problem\");}}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Alert,{className:\"text-center mt-3\",variant:this.state.connected?\"success\":\"danger\",children:this.state.connected?\"Robot Connected\":\"Robot Disconnected\"})})//<h2>Connection</h2>\n;}}]);return Connection;}(Component);export default Connection;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/Connection.jsx"],"names":["React","Component","Alert","Config","Connection","state","connected","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER"],"mappings":"wjBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,uBAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,C,8CAEMC,CAAAA,U,wGACwC;AAE1C;AACA,qBAAa,4CACT,wBADS,MAHbC,KAGa,CAHJ,CAACC,SAAS,CAAG,KAAb,CAAoBC,GAAG,CAAE,IAAzB,CAGI,CAET,MAAKC,eAAL,GAFS,aAGZ,C,sDAGD,0BAAiB,iBACb,KAAKH,KAAL,CAAWE,GAAX,CAAiB,GAAIE,CAAAA,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB,CACAC,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWE,GAAvB,EAEA,KAAKF,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,YAAlB,CAA+B,UAAM,CAAW;AAC5CF,OAAO,CAACC,GAAR,CAAY,yBAAZ,EACA,MAAI,CAACE,QAAL,CAAc,CAACT,SAAS,CAAG,IAAb,CAAd,EAA6C;AAChD,CAHD,EAKA,KAAKD,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,OAAlB,CAA2B,UAAM,CAAW;AACxCF,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACA,MAAI,CAACE,QAAL,CAAc,CAACT,SAAS,CAAG,KAAb,CAAd,EACAU,UAAU,CAAC,UAAM,CACb,GAAI,CACA,MAAI,CAACX,KAAL,CAAWE,GAAX,CAAeU,OAAf,CACI,QACAd,MAAM,CAACe,mBADP,CAEA,GAFA,CAGAf,MAAM,CAACgB,qBAJX,EAIuD;AACX;AAC/C,OAAMC,KAAN,CAAY,CACTR,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACH,CACJ,CAXS,CAWRV,MAAM,CAACkB,kBAXC,CAAV,CAYH,CAfD,EAgBA;AACA;AACA;AACA;AACA,GAAI,CACA,KAAKhB,KAAL,CAAWE,GAAX,CAAeU,OAAf,CACI,QACAd,MAAM,CAACe,mBADP,CAEA,GAFA,CAGAf,MAAM,CAACgB,qBAJX,EAKuB;AACqB;AAC/C,OAAMC,KAAN,CAAY,CACTR,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACH,CACJ,C,sBAED,iBAAS,CACL,mBACI,kCACI,KAAC,KAAD,EAAO,SAAS,CAAC,kBAAjB,CAAoC,OAAO,CAAE,KAAKR,KAAL,CAAWC,SAAX,CAAsB,SAAtB,CAAgC,QAA7E,UACK,KAAKD,KAAL,CAAWC,SAAX,CAAsB,iBAAtB,CAAyC,oBAD9C,EADJ,EAKA;AANJ,CAQH,C,wBA7DoBL,S,EAgEzB,cAAeG,CAAAA,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\n\nclass Connection extends Component{\n    state  = {connected : false, ros: null }; //ros only handle the object for the connection, so we can use it inside the Connection.jsx\n\n    // We need to make constructor to be able to call this.state.ros method\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established!\");\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <Alert className='text-center mt-3' variant={this.state.connected? \"success\":\"danger\"}> \n                    {this.state.connected? \"Robot Connected\": \"Robot Disconnected\" }\n                </Alert>\n            </div>\n            //<h2>Connection</h2>\n         );\n    } \n}\n\nexport default Connection;"]},"metadata":{},"sourceType":"module"}