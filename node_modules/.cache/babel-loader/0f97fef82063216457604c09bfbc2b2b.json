{"ast":null,"code":"var _jsxFileName = \"/home/tarek/react-ros-robot/src/components/Connection.jsx\";\nimport React, { Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Connection extends Component {\n  //ros only handle the object for the connection, so we can use it inside the Connection.jsx\n  // We need to make constructor to be able to call this.state.ros method\n  constructor() {\n    super();\n    this.state = {\n      connected: false,\n      ros: null\n    };\n    this.init_connection();\n  }\n\n  init_connection() {\n    this.state.ros = new window.ROSLIB.Ros();\n    console.log(this.state.ros);\n    this.state.ros.on(\"connection\", () => {\n      //Triger when there is an event and event here will be connected\n      console.log(\"connection established!\");\n      this.setState({\n        connected: true\n      }); //Update the state if connected\n    });\n    this.state.ros.on(\"connection\", () => {\n      //Create another event when the connection is closed\n      console.log(\"connection is closed\");\n      this.setState({\n        connected: false\n      });\n    }); //To take the connection parameters\n    //We need to get them from the machine where the ROSbridge is running\n    //To get the IP write command ifconfig\n    //And the PORT Number by default is 9090\n\n    this.state.ros.connected(); //This event will take a string that represent the connections, setting the IP\n    // address and the PORT number \n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        className: \"text-center mt-3\",\n        variant: this.state.connected ? \"success\" : \"danger\",\n        children: this.state.connected ? \"Robot Connected\" : \"Robot Disconnected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this) //<h2>Connection</h2>\n    ;\n  }\n\n}\n\nexport default Connection;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/Connection.jsx"],"names":["React","Component","Alert","Connection","constructor","state","connected","ros","init_connection","window","ROSLIB","Ros","console","log","on","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AACA,MAAMC,UAAN,SAAyBF,SAAzB,CAAkC;AACY;AAE1C;AACAG,EAAAA,WAAW,GAAE;AACT;AADS,SAHbC,KAGa,GAHJ;AAACC,MAAAA,SAAS,EAAG,KAAb;AAAoBC,MAAAA,GAAG,EAAE;AAAzB,KAGI;AAET,SAAKC,eAAL;AACH;;AAGDA,EAAAA,eAAe,GAAE;AACb,SAAKH,KAAL,CAAWE,GAAX,GAAiB,IAAIE,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWE,GAAvB;AAEA,SAAKF,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,YAAlB,EAA+B,MAAM;AAAW;AAC5CF,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,WAAKE,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAG;AAAb,OAAd,EAFiC,CAEY;AAChD,KAHD;AAKA,SAAKD,KAAL,CAAWE,GAAX,CAAeO,EAAf,CAAkB,YAAlB,EAAgC,MAAM;AAAW;AAC7CF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAKE,QAAL,CAAc;AAACT,QAAAA,SAAS,EAAG;AAAb,OAAd;AACH,KAHD,EATa,CAeb;AACA;AACA;AACA;;AAEA,SAAKD,KAAL,CAAWE,GAAX,CAAeD,SAAf,GApBa,CAoBmC;AACA;AAEnD;;AAEDU,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAoC,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWC,SAAX,GAAsB,SAAtB,GAAgC,QAA7E;AAAA,kBACK,KAAKD,KAAL,CAAWC,SAAX,GAAsB,iBAAtB,GAAyC;AAD9C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,CAMI;AANJ;AAQH;;AA5C6B;;AA+ClC,eAAeH,UAAf","sourcesContent":["import React, { Component } from 'react'\nimport Alert from 'react-bootstrap/Alert'\nclass Connection extends Component{\n    state  = {connected : false, ros: null }; //ros only handle the object for the connection, so we can use it inside the Connection.jsx\n\n    // We need to make constructor to be able to call this.state.ros method\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros)\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established!\");\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"connection\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n        });\n        \n\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n\n        this.state.ros.connected();                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n\n    }\n\n    render() {\n        return(\n            <div>\n                <Alert className='text-center mt-3' variant={this.state.connected? \"success\":\"danger\"}> \n                    {this.state.connected? \"Robot Connected\": \"Robot Disconnected\" }\n                </Alert>\n            </div>\n            //<h2>Connection</h2>\n         );\n    } \n}\n\nexport default Connection;"]},"metadata":{},"sourceType":"module"}