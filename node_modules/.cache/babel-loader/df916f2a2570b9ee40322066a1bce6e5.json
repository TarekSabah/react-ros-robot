{"ast":null,"code":"import _classCallCheck from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/tarek/react-ros-robot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Config from'../scripts/config';import{jsx as _jsx}from\"react/jsx-runtime\";var Map=/*#__PURE__*/function(_Component){_inherits(Map,_Component);var _super=_createSuper(Map);function Map(){var _this;_classCallCheck(this,Map);_this=_super.call(this);_this.state={ros:null};_this.view_map=_this.view_map.bind(_assertThisInitialized(_this));return _this;}_createClass(Map,[{key:\"init_connection\",value:function init_connection(){var _this2=this;this.state.ros=new window.ROSLIB.Ros();console.log(this.state.ros);this.state.ros.on(\"connection\",function(){//Triger when there is an event and event here will be connected\nconsole.log(\"connection established in RobotState Component!\");console.log(_this2.state.ros);_this2.setState({connected:true});//Update the state if connected\n});this.state.ros.on(\"close\",function(){//Create another event when the connection is closed\nconsole.log(\"connection is closed\");_this2.setState({connected:false});setTimeout(function(){try{_this2.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP address and the PORT number \n}catch(error){console.log(\"connection problem\");}},Config.RECONNECTION_TIMER);});//To take the connection parameters\n//We need to get them from the machine where the ROSbridge is running\n//To get the IP write command ifconfig\n//And the PORT Number by default is 9090\ntry{this.state.ros.connect(\"ws://\"+Config.ROSBRIDGE_SERVER_IP+\":\"+Config.ROSBRIDGE_SERVER_PORT);//This event will take a string that represent the connections, setting the IP address and the PORT number \n}catch(error){console.log(\"connection problem\");}}},{key:\"componentDidMount\",value:function componentDidMount(){this.init_connection();this.view_map();}},{key:\"view_map\",value:function view_map(){var viewer=new window.ROS2D.Viewer({divID:\"nav_div\",width:640,height:480});var navClient=new window.NAV2D.OccupancyGridClientNav({ros:this.state.ros,rootObject:viewer.scene,viewer:viewer,serverName:\"/move_base\",withOrientation:true});}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{id:\"nav_div\",children:\"Viewer\"})});}}]);return Map;}(Component);export default Map;","map":{"version":3,"sources":["/home/tarek/react-ros-robot/src/components/Map.jsx"],"names":["React","Component","Config","Map","state","ros","view_map","bind","window","ROSLIB","Ros","console","log","on","setState","connected","setTimeout","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","RECONNECTION_TIMER","init_connection","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation"],"mappings":"0tBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,C,8CAGMC,CAAAA,G,0FAKF,cAAa,qCACT,wBADS,MAJbC,KAIa,CAJL,CACJC,GAAG,CAAE,IADD,CAIK,CAET,MAAKC,QAAL,CAAgB,MAAKA,QAAL,CAAcC,IAAd,+BAAhB,CAFS,aAGZ,C,+CAED,0BAAiB,iBACb,KAAKH,KAAL,CAAWC,GAAX,CAAiB,GAAIG,CAAAA,MAAM,CAACC,MAAP,CAAcC,GAAlB,EAAjB,CACAC,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWC,GAAvB,EAEA,KAAKD,KAAL,CAAWC,GAAX,CAAeQ,EAAf,CAAkB,YAAlB,CAA+B,UAAM,CAAW;AAC5CF,OAAO,CAACC,GAAR,CAAY,iDAAZ,EACAD,OAAO,CAACC,GAAR,CAAY,MAAI,CAACR,KAAL,CAAWC,GAAvB,EACA,MAAI,CAACS,QAAL,CAAc,CAACC,SAAS,CAAG,IAAb,CAAd,EAA6C;AAChD,CAJD,EAMA,KAAKX,KAAL,CAAWC,GAAX,CAAeQ,EAAf,CAAkB,OAAlB,CAA2B,UAAM,CAAW;AACxCF,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACA,MAAI,CAACE,QAAL,CAAc,CAACC,SAAS,CAAG,KAAb,CAAd,EACAC,UAAU,CAAC,UAAM,CACb,GAAI,CACA,MAAI,CAACZ,KAAL,CAAWC,GAAX,CAAeY,OAAf,CAAwB,QAAUf,MAAM,CAACgB,mBAAjB,CAAuC,GAAvC,CAA6ChB,MAAM,CAACiB,qBAA5E,EAAwH;AAC3H,OAAMC,KAAN,CAAY,CACTT,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACH,CACJ,CANS,CAMRV,MAAM,CAACmB,kBANC,CAAV,CAOH,CAVD,EAWA;AACA;AACA;AACA;AACA,GAAI,CACA,KAAKjB,KAAL,CAAWC,GAAX,CAAeY,OAAf,CAAwB,QAAUf,MAAM,CAACgB,mBAAjB,CAAuC,GAAvC,CAA6ChB,MAAM,CAACiB,qBAA5E,EAAyH;AAC5H,OAAMC,KAAN,CAAY,CACTT,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACH,CACJ,C,iCAED,4BAAmB,CACf,KAAKU,eAAL,GACA,KAAKhB,QAAL,GACH,C,wBAGD,mBAAU,CACN,GAAIiB,CAAAA,MAAM,CAAG,GAAIf,CAAAA,MAAM,CAACgB,KAAP,CAAaC,MAAjB,CAAwB,CACjCC,KAAK,CAAE,SAD0B,CAEjCC,KAAK,CAAC,GAF2B,CAGjCC,MAAM,CAAC,GAH0B,CAAxB,CAAb,CAMA,GAAIC,CAAAA,SAAS,CAAG,GAAIrB,CAAAA,MAAM,CAACsB,KAAP,CAAaC,sBAAjB,CAAwC,CACpD1B,GAAG,CAAE,KAAKD,KAAL,CAAWC,GADoC,CAEpD2B,UAAU,CAAET,MAAM,CAACU,KAFiC,CAGpDV,MAAM,CAAEA,MAH4C,CAIpDW,UAAU,CAAE,YAJwC,CAKpDC,eAAe,CAAE,IALmC,CAAxC,CAAhB,CAOH,C,sBAID,iBAAQ,CACJ,mBAAO,kCACH,YAAK,EAAE,CAAG,SAAV,oBADG,EAAP,CAGH,C,iBAtEalC,S,EA2ElB,cAAeE,CAAAA,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport Config from '../scripts/config';\n\n\nclass Map extends Component{\n    state = {\n        ros: null,\n    };\n\n    constructor(){\n        super();\n        this.view_map = this.view_map.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT );                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }    \n\n    componentDidMount(){\n        this.init_connection();\n        this.view_map();\n    }\n\n\n    view_map(){\n        var viewer = new window.ROS2D.Viewer({\n            divID: \"nav_div\",\n            width:640,\n            height:480\n        });\n\n        var navClient = new window.NAV2D.OccupancyGridClientNav({\n            ros: this.state.ros,\n            rootObject: viewer.scene,\n            viewer: viewer,\n            serverName: \"/move_base\",\n            withOrientation: true,\n        }); \n    }\n\n\n\n    render(){\n        return <div>\n            <div id = \"nav_div\">Viewer</div>\n        </div>;\n    }\n\n}\n\n\nexport default Map;"]},"metadata":{},"sourceType":"module"}