[{"/home/tarek/react-ros-robot/src/index.js":"1","/home/tarek/react-ros-robot/src/reportWebVitals.js":"2","/home/tarek/react-ros-robot/src/App.js":"3","/home/tarek/react-ros-robot/src/components/Footer.jsx":"4","/home/tarek/react-ros-robot/src/components/Header.jsx":"5","/home/tarek/react-ros-robot/src/components/Body.jsx":"6","/home/tarek/react-ros-robot/src/components/Home.jsx":"7","/home/tarek/react-ros-robot/src/components/About.jsx":"8","/home/tarek/react-ros-robot/src/components/Connection.jsx":"9","/home/tarek/react-ros-robot/src/scripts/config.js":"10","/home/tarek/react-ros-robot/src/components/Teleoperation.jsx":"11","/home/tarek/react-ros-robot/src/components/RobotState.jsx":"12","/home/tarek/react-ros-robot/src/components/Video.jsx":"13","/home/tarek/react-ros-robot/src/components/Map.jsx":"14"},{"size":544,"mtime":1622730783263,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1622644570193,"results":"17","hashOfConfig":"16"},{"size":276,"mtime":1622729447724,"results":"18","hashOfConfig":"16"},{"size":307,"mtime":1622729756419,"results":"19","hashOfConfig":"16"},{"size":883,"mtime":1622731447019,"results":"20","hashOfConfig":"16"},{"size":636,"mtime":1622727873977,"results":"21","hashOfConfig":"16"},{"size":1446,"mtime":1624802665389,"results":"22","hashOfConfig":"16"},{"size":550,"mtime":1622768782609,"results":"23","hashOfConfig":"16"},{"size":2731,"mtime":1622755605320,"results":"24","hashOfConfig":"16"},{"size":414,"mtime":1624799116641,"results":"25","hashOfConfig":"16"},{"size":4623,"mtime":1623573790290,"results":"26","hashOfConfig":"16"},{"size":5088,"mtime":1624799718160,"results":"27","hashOfConfig":"16"},{"size":188,"mtime":1622769805770,"results":"28","hashOfConfig":"16"},{"size":2569,"mtime":1624802576742,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"18zx3po",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"/home/tarek/react-ros-robot/src/index.js",[],["64","65"],"/home/tarek/react-ros-robot/src/reportWebVitals.js",[],"/home/tarek/react-ros-robot/src/App.js",[],"/home/tarek/react-ros-robot/src/components/Footer.jsx",[],"/home/tarek/react-ros-robot/src/components/Header.jsx",[],"/home/tarek/react-ros-robot/src/components/Body.jsx",[],"/home/tarek/react-ros-robot/src/components/Home.jsx",["66"],"import React, { Component } from 'react';\nimport Connection from './Connection';\nimport Teleoperation from './Teleoperation';\nimport RobotState from './RobotState';\nimport Map from './Map';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\nclass Home extends Component{\n    state = {};\n    render(){\n        return(\n            <div>\n                <Container>\n                    <h1 className=\"text-center mt-3\">Robot Control Page</h1>\n                    <Row>\n                        <Col> \n                            <Connection />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col> \n                            <h2>Teleoperation </h2>\n                        </Col>\n                        <Col> \n                            <h2>Map</h2>\n                            \n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col> \n                            <Teleoperation />\n                            <RobotState /> \n                        </Col>\n                        <Col> \n                            <Map></Map>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            \n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\nexport default Home;","/home/tarek/react-ros-robot/src/components/About.jsx",[],"/home/tarek/react-ros-robot/src/components/Connection.jsx",["67"],"import React, { Component } from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Config from '../scripts/config';\n\nclass Connection extends Component{\n    state  = {connected : false, ros: null }; //ros only handle the object for the connection, so we can use it inside the Connection.jsx\n\n    // We need to make constructor to be able to call this.state.ros method\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established!\");\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <Alert className='text-center mt-3' variant={this.state.connected? \"success\":\"danger\"}> \n                    {this.state.connected? \"Robot Connected\": \"Robot Disconnected\" }\n                </Alert>\n            </div>\n            //<h2>Connection</h2>\n         );\n    } \n}\n\nexport default Connection;","/home/tarek/react-ros-robot/src/scripts/config.js",[],"/home/tarek/react-ros-robot/src/components/Teleoperation.jsx",["68","69","70","71"],"import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport Config from '../scripts/config';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\n\n\nclass Teleoperation extends Component{\n    state = {ros: null};\n\n    constructor(){\n        super();\n        this.init_connection();\n        this.handleMove = this.handleMove.bind(this);\n        this.handleStop = this.handleStop.bind(this);\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in Teleoperation Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n\n    handleMove(event) {\n        console.log(\"Handle Move\");\n\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: event.y / 50,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: -event.x / 50,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n    handleStop(event) {\n        console.log(\"Handle Stop\");\n        //We need to create ROS Publisher on the Topic cmd_vel\n        var cmd_vel = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.PUB_CMD_VEL_TOPIC, //Name of the Topic\n            messageType: Config.PUB_CMD_VEL_MESSAGE, //Message Type\n        }\n        );\n        //We need to create Twist message to be sent to ROSBridge\n        var twist = new window.ROSLIB.Message({\n            linear:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            angular:{\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        });\n        //We need to Publish the message on the cmd_vel Topic\n        cmd_vel.publish(twist);\n    }\n\n    render(){\n        return(\n        <div>\n            <Row>\n                <Col> \n                    <h2 className=\"mt-4\"></h2>\n                </Col>\n            </Row>\n            <Row>\n                <Col> \n                <Joystick \n                    size={100} \n                    baseColor=\"#EEEEEE\" \n                    stickColor=\"#000000\" \n                    move={this.handleMove} \n                    stop={this.handleStop}>\n\n                </Joystick>\n                </Col>\n            </Row>\n\n\n        </div>\n        );\n    }\n}\nexport default Teleoperation; \n","/home/tarek/react-ros-robot/src/components/RobotState.jsx",["72","73","74"],"import React, { Component } from 'react';\nimport {Row, Col, Container, Button} from \"react-bootstrap\";\nimport Config from '../scripts/config';\nimport * as Three from \"three\";\n\n\nclass RobotState extends Component{\n    state = {\n        ros: null,\n        x:0,\n        y:0,\n        Orientation:0,\n        Linear_velocity:0,\n        Angular_velocity:0,\n    };\n\n    constructor(){\n        super();\n        this.init_connection();\n    }\n\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect(\n                        \"ws://\" +\n                        Config.ROSBRIDGE_SERVER_IP +\n                        \":\" +\n                        Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP\n                                                                // address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect(\n                \"ws://\" +\n                Config.ROSBRIDGE_SERVER_IP +\n                \":\" +\n                Config.ROSBRIDGE_SERVER_PORT\n            );                     //This event will take a string that represent the connections, setting the IP\n                                                        // address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }\n\n    componentDidMount(){\n        this.getRobotState();\n        // this.getOrientationFromQuaternion();\n    }\n\n    getRobotState() {\n        //Create Pose Subscriber\n        var pose_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.SUB_CMD_POSE_TOPIC,\n            messageType: Config.SUB_CMD_POSE_MESSAGE,\n        });\n        //Create a pose callback\n        pose_subscriber.subscribe((message) => {\n            this.setState({x: message.pose.pose.position.x.toFixed(2)});\n            this.setState({y: message.pose.pose.position.y.toFixed(2)});\n            this.setState({\n                Orientation: this.getOrientationFromQuaternion(\n                    message.pose.pose.orientation\n                    ).toFixed(2),\n                });\n        }); \n\n        //Create a subscriber for the velocities in the odom topic\n\n        var velocity_subscriber = new window.ROSLIB.Topic({\n            ros: this.state.ros,\n            name: Config.SUB_CMD_ODOM_TOPIC,\n            messageType: Config.SUB_CMD_ODOM_MESSAGE,\n        });\n        //Create a pose callback\n        velocity_subscriber.subscribe((message) => {\n            this.setState({Linear_velocity: message.twist.twist.linear.x.toFixed(2)});\n            this.setState({Angular_velocity: message.twist.twist.angular.z.toFixed(2)});\n        }); \n        \n    } \n\n    getOrientationFromQuaternion(ros_orientation_quaternion){\n        var q = new Three.Quaternion(\n            ros_orientation_quaternion.x,\n            ros_orientation_quaternion.y,\n            ros_orientation_quaternion.z,\n            ros_orientation_quaternion.w\n            ); \n\n        //Convert this quaternion into Roll, Pitch and Yaw\n        var RPY = new Three.Euler().setFromQuaternion(q);\n        return RPY[\"_z\"] * (180 / Math.PI);\n    }\n\n    //Create a subscriber for the \n\n\n    render(){\n        return(\n            <div>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-5\">Position</h4>\n                    <p className=\"mt-0\">x: {this.state.x}</p>\n                    <p className=\"mt-0\">y: {this.state.y}</p>\n                    <p className=\"mt-0\">Orientation: {this.state.Orientation}</p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                    <h4 className=\"mt-4\">Velocities</h4>\n                    <p className=\"mt-0\">Linear Velocity: {this.state.Linear_velocity}</p>\n                    <p className=\"mt-0\">Angular Velocity: {this.state.Angular_velocity}</p>\n\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\nexport default RobotState; ","/home/tarek/react-ros-robot/src/components/Video.jsx",[],"/home/tarek/react-ros-robot/src/components/Map.jsx",["75","76"],"import React, { Component } from 'react';\nimport Config from '../scripts/config';\n\n\nclass Map extends Component{\n    state = {\n        ros: null,\n    };\n\n    constructor(){\n        super();\n        this.view_map = this.view_map.bind(this);\n    }\n\n    init_connection(){\n        this.state.ros = new window.ROSLIB.Ros();\n        console.log(this.state.ros);\n\n        this.state.ros.on(\"connection\",() => {          //Triger when there is an event and event here will be connected\n            console.log(\"connection established in RobotState Component!\");\n            console.log(this.state.ros);\n            this.setState({connected : true});           //Update the state if connected\n        });\n        \n        this.state.ros.on(\"close\", () => {          //Create another event when the connection is closed\n            console.log(\"connection is closed\");\n            this.setState({connected : false});\n            setTimeout(() => {\n                try {\n                    this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n                }catch(error){\n                    console.log(\"connection problem\");\n                }\n            },Config.RECONNECTION_TIMER);\n        });\n        //To take the connection parameters\n        //We need to get them from the machine where the ROSbridge is running\n        //To get the IP write command ifconfig\n        //And the PORT Number by default is 9090\n        try {\n            this.state.ros.connect( \"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT );                     //This event will take a string that represent the connections, setting the IP address and the PORT number \n        }catch(error){\n            console.log(\"connection problem\");\n        }          \n    }    \n\n    componentDidMount(){\n        this.init_connection();\n        this.view_map();\n    }\n\n\n    view_map(){\n        var viewer = new window.ROS2D.Viewer({\n            divID: \"nav_div\",\n            width:640,\n            height:480\n        });\n\n        var navClient = new window.NAV2D.OccupancyGridClientNav({\n            ros: this.state.ros,\n            rootObject: viewer.scene,\n            viewer: viewer,\n            serverName: \"/move_base\",\n            withOrientation: true,\n        }); \n    }\n\n\n\n    render(){\n        return <div>\n            <div id = \"nav_div\">Viewer</div>\n        </div>;\n    }\n\n}\n\n\nexport default Map;",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":6,"column":30,"nodeType":"83","messageId":"84","endLine":6,"endColumn":36},{"ruleId":"85","severity":1,"message":"86","line":16,"column":9,"nodeType":"87","messageId":"88","endLine":16,"endColumn":19},{"ruleId":"81","severity":1,"message":"89","line":4,"column":19,"nodeType":"83","messageId":"84","endLine":4,"endColumn":28},{"ruleId":"81","severity":1,"message":"82","line":4,"column":30,"nodeType":"83","messageId":"84","endLine":4,"endColumn":36},{"ruleId":"85","severity":1,"message":"86","line":19,"column":9,"nodeType":"87","messageId":"88","endLine":19,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":119,"column":21,"nodeType":"92","endLine":119,"endColumn":42},{"ruleId":"81","severity":1,"message":"89","line":2,"column":19,"nodeType":"83","messageId":"84","endLine":2,"endColumn":28},{"ruleId":"81","severity":1,"message":"82","line":2,"column":30,"nodeType":"83","messageId":"84","endLine":2,"endColumn":36},{"ruleId":"85","severity":1,"message":"86","line":24,"column":9,"nodeType":"87","messageId":"88","endLine":24,"endColumn":19},{"ruleId":"85","severity":1,"message":"86","line":16,"column":9,"nodeType":"87","messageId":"88","endLine":16,"endColumn":19},{"ruleId":"81","severity":1,"message":"93","line":60,"column":13,"nodeType":"83","messageId":"84","endLine":60,"endColumn":22},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'Container' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'navClient' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]